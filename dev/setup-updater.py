#!dev/python.sh
import os
import re
import sys
from collections import OrderedDict
from pathlib import Path

sys.path.append(os.getcwd())
from dev.metadata import PACKAGE_GENERIC_INFO  # noqa: E402
from dev.metadata import PACKAGE_SPECIFIC_INFO  # noqa: E402
from dev.tools.pretty import black_format  # noqa: E402
from dev.version import __version__  # noqa: E402

versions_info = dict(walt_version=__version__)


def format_setup_py(package_name):
    package_specific = PACKAGE_SPECIFIC_INFO[package_name]
    subdir = Path(package_specific["subdir"])
    # remove obsolete info.py file if it exists
    subdir_as_path = str(subdir).replace("-", "/")  # client-g5k -> client/g5k
    obsolete_info_py = subdir / "walt" / subdir_as_path / "info.py"
    if obsolete_info_py.exists():
        obsolete_info_py.unlink()
    # prepare package setup info
    setup_info = OrderedDict()
    setup_info.update(name=package_name)
    version = package_specific["version_str"] % versions_info
    setup_info.update(version=version)
    requirements_txt = subdir / "requirements.txt"
    if requirements_txt.exists():
        uncommented = re.sub(r"#[^\n]*\n", "", requirements_txt.read_text())
        install_requires = uncommented.strip().splitlines()
    else:
        install_requires = [
            requirement % versions_info for requirement in package_specific["requires"]
        ]
    setup_info.update(install_requires=install_requires)
    if "extras_require" in package_specific:
        extras_require = {
            feature: [(req % versions_info) for req in requirements]
            for (feature, requirements) in package_specific["extras_require"].items()
        }
        setup_info.update(extras_require=extras_require)
    setup_info.update(sorted(PACKAGE_GENERIC_INFO.items()))
    setup_info.update(sorted(package_specific["setup"].items()))
    setup_info = dict(**setup_info)  # convert back to dict
    # write setup.py file
    setup_py = subdir / "setup.py"
    setup_py.write_text(f"""\
# auto-generated by dev/setup-updater.py
# using metadata from dev/metadata.py

import sys

from setuptools import find_packages, setup

if sys.version_info[0] == 2:
    sys.exit("Sorry, Python 2 is no longer supported.")

setup_info = {repr(setup_info)}
setup_info.update(
      packages=find_packages()
)
setup(**setup_info)
""")
    return setup_py


if __name__ == '__main__':
    setup_py_files = []
    if len(sys.argv) == 2:
        # reformat one setup.py
        package_name = sys.argv[1]
        setup_py = format_setup_py(package_name)
        setup_py_files.append(setup_py)
    else:
        # reformat all setup.py files
        for package_name in PACKAGE_SPECIFIC_INFO.keys():
            setup_py = format_setup_py(package_name)
            setup_py_files.append(setup_py)
    # make setup.py files pretty
    black_format(*setup_py_files)
