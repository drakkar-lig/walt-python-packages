#!dev/python.sh
import json
import shlex
import subprocess
import sys
from pathlib import Path

# python-apt-binary is packaged by us
# (see https://github.com/drakkar-lig/python-apt-binary and
# https://pypi.org/project/python-apt-binary)
# since it is tightly linked to the apt OS libraries, we
# have a different version for each debian OS release.
# so in this server/requirements.txt file we should not
# specify a version for this dependency.
PACKAGES_WITH_FLEXIBLE_VERSION = {"python-apt-binary"}


def all_package_names():
    cmd = shlex.split("dev/python.sh -m pip list --format json")
    proc = subprocess.run(cmd, text=True, stdout=subprocess.PIPE)
    return list(p_info["name"] for p_info in json.loads(proc.stdout))


def parse_rfc2822_part(text):
    pinfo = {}
    for line in text.splitlines():
        splits = line.split(":", maxsplit=1)
        if splits[0] in ("Name", "Version", "Requires"):
            k, v = splits
            pinfo[k] = v.strip()
    return pinfo


def parse_rfc2822(text):
    return [parse_rfc2822_part(part) for part in text.split("\n---")]


def get_packages_info(package_names):
    cmd = ["dev/python.sh", "-m", "pip", "show"] + list(package_names)
    proc = subprocess.run(cmd, text=True, stdout=subprocess.PIPE)
    parsed = parse_rfc2822(proc.stdout)
    return {p_info["Name"].lower(): p_info for p_info in parsed}


def get_dependencies(package_name, packages_info, add_current_package=False):
    dependencies = {}
    package_info = packages_info[package_name.lower()]
    if add_current_package:
        package_name = package_info["Name"]
        package_version = package_info["Version"]
        dependencies[package_name] = package_version
    if len(package_info["Requires"].strip()) > 0:
        required_package_names = package_info["Requires"].split(", ")
        for required_package_name in required_package_names:
            dependencies.update(
                get_dependencies(
                    required_package_name, packages_info, add_current_package=True
                )
            )
    return dependencies


def usage_exit():
    sys.exit(f"Usage: {sys.argv[0]} [freeze|unfreeze]")


if __name__ == "__main__":
    if len(sys.argv) < 2:
        usage_exit()
    mode = sys.argv[1]
    filepath = Path("server/requirements.txt")
    if mode == "freeze":
        print("probing the list of pip packages")
        package_names = all_package_names()
        print("querying info about pip packages")
        packages_info = get_packages_info(package_names)
        dependencies = get_dependencies("walt-server", packages_info)
        print(f"writing {filepath}")
        filepath.write_text(
            "# generated by `make freeze-deps`\n"
            + "\n".join(
                (f"{k}" if k in PACKAGES_WITH_FLEXIBLE_VERSION else f"{k}=={v}")
                for k, v in sorted(dependencies.items())
            )
            + "\n"
        )
    elif mode == "unfreeze":
        if filepath.exists():
            print(f"removing {filepath}")
            filepath.unlink()
    else:
        usage_exit()
